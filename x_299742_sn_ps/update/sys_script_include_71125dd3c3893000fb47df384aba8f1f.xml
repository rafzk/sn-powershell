<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_299742_sn_ps.PowershellProbe</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>A MIDServer helper probe library that generates Powershell commands onto the ECC queue and handles responses </description>
        <name>PowershellProbe</name>
        <script><![CDATA[var PowershellProbe = Class.create();
PowershellProbe.prototype = {
	initialize: function(mid, server, midScript) {
		this.setMidServer(mid);
		this.setPSServer(server);
		this.setMidScript(midScript);
	},
	
	_createEccOutputRecord: function() {
		var ecc = new GlideRecord("ecc_queue");
		ecc.initialize();
		ecc.agent = this.mid;
		ecc.topic = "Powershell";
		ecc.name = "Windows - Powershell";
		ecc.source = this.psServer;
		ecc.queue = "output";
		ecc.state = "ready";
		ecc.payload = this._getPayloadString();
		return ecc.insert();
	},
	
	_getPayloadString: function() {
		var xmldoc = new XMLDocument("<parameters/>");
		
		var el = xmldoc.createElement("parameter");
		xmldoc.setCurrent(el);
		xmldoc.setAttribute("name", "skip_sensor");
		xmldoc.setAttribute("value", "true");
		
		xmldoc.setCurrent(xmldoc.getDocumentElement());
		el = xmldoc.createElement("parameter");
		xmldoc.setCurrent(el);
		xmldoc.setAttribute("name", "probe_name");
		xmldoc.setAttribute("value", "Windows - Powershell");
		
		xmldoc.setCurrent(xmldoc.getDocumentElement());
		el = xmldoc.createElement("parameter");
		xmldoc.setCurrent(el);
		if(this.midScript) {
			xmldoc.setAttribute("name", "MIDScriptFile");
			xmldoc.setAttribute("value", this._getScriptFilePath(''+this.midScript));
			if(this.prettyScript != "")
				this._setScriptFilePararms(el,xmldoc,this.prettyScript);
		}
		else {
			xmldoc.setAttribute("name", "script.ps1");
			xmldoc.setAttribute("value", this.prettyScript);
		}
		
		return xmldoc.toString();
	},
	
	
	_getPayload: function(ecc) {
		if (ecc.payload != "<see_attachment/>") {
			return ecc.payload;
		}
		var sa = new GlideSysAttachment();
		var payload = sa.get(ecc, "payload");
		return payload;
	},
	
	_getResponse : function(eccQueueRecordId) {
		var maxtime = gs.getProperty("com.snc.integration.powershellprobe.maxWaitTimeForEccQueue", 60);
		var counter = 0;
		var found = false;
		var eccResponse = new GlideRecord("ecc_queue");
		eccResponse.addQuery("queue", "input");
		eccResponse.addQuery("response_to", eccQueueRecordId);
		while (counter < maxtime && found == false) {
			eccResponse.query();
			if (eccResponse.next()) {
				found = true;
			}
			gs.sleep(1000);
			counter++;
		}
		var payload = this._getPayload(eccResponse);
		var xmldoc = new XMLDocument(payload);
		var retObj = {};
		retObj.output="";
		retObj.error="";
		if (found) {
			retObj.output = ""+this._getResponseOutputValue(xmldoc);
			retObj.error = ""+this._getResponseErrorValue(xmldoc);
			return retObj;
		}
	},
	
	_getResponseErrorValue: function(xmldoc) {
		var error = null;
		var nodes = xmldoc.getNodes("//results/result/*");
		for (i = 0; i < nodes.length; i++) {
			var nodeName = nodes.item(i).getNodeName();
			var nodeTextContent = nodes.item(i).getTextContent();
			if(nodeName == "error" && nodeTextContent != null && nodeTextContent.toString().trim() != ""){
					error = nodeTextContent;
			}
		}
		return error;
	},
		
	_getResponseOutputValue: function(xmldoc) {
		var output = null;
		var nodes = xmldoc.getNodes("//results/result/*");
		for (i = 0; i < nodes.length; i++) {
			var nodeName = nodes.item(i).getNodeName();
			var nodeTextContent = nodes.item(i).getTextContent();
			if(nodeName == "output" && nodeTextContent != null && nodeTextContent.toString().trim() != ""){
					output = nodeTextContent;
			}
		}
		return output;
	},
	
	_getScriptFilePath: function(file_id) {
		var scriptPath = '';
		var gr = new GlideRecord('ecc_agent_script_file');
		if (gr.get(file_id)) {
			var path = '';
			while (!gs.nil(gr)) {
				path = gs.nil(path) ? gr.name : gr.name + '\\' + path;
				gr = gr.parent;
			}
			
			scriptPath = 'scripts\\' + path;
		}
		
		return scriptPath;
	},
	
	_setScriptFilePararms: function(el, xmldoc, strJson){
		var jsonHelper = new global.JSON();
		var jsonParams = jsonHelper.decode(strJson);
		
		for(var param in jsonParams){
			xmldoc.setCurrent(xmldoc.getDocumentElement());
			el = xmldoc.createElement("parameter");
			xmldoc.setCurrent(el);
			xmldoc.setAttribute("name", "powershell_param_"+param);
			xmldoc.setAttribute("value", jsonParams[param]);
		}
	},
	
	execute: function(waitForResponse) {
		var recSysId = this._createEccOutputRecord();
		if(waitForResponse == true){
			var response = this._getResponse(recSysId);
			return response;
		}
	},
	
	setMidServer: function(mid) {
		this.mid = "mid.server."+mid;
	},
	
	setPSServer: function(server) {
		this.psServer = server;
	},
	
	setMidScript : function(midScript) {
		this.midScript = midScript;
	},
	
	setScript: function(script) {
		this.prettyScript = script;
		this.encodedScript = GlideStringUtil.escapeHTML(script);
	},
	
	
	
	type: 'PowershellProbe'
};

]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin_SHARE_SHARE</sys_created_by>
        <sys_created_on>2012-10-18 14:06:48</sys_created_on>
        <sys_id>71125dd3c3893000fb47df384aba8f1f</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>PowershellProbe</sys_name>
        <sys_package display_value="sn-powershell" source="x_299742_sn_ps">9603df42db0300100cc4bd513996191f</sys_package>
        <sys_policy/>
        <sys_scope display_value="sn-powershell">9603df42db0300100cc4bd513996191f</sys_scope>
        <sys_update_name>sys_script_include_71125dd3c3893000fb47df384aba8f1f</sys_update_name>
        <sys_updated_by>conmic_SHARE</sys_updated_by>
        <sys_updated_on>2016-04-18 09:55:57</sys_updated_on>
    </sys_script_include>
</record_update>
